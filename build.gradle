plugins {
    id 'java-library'
    id 'me.champeau.jmh' version '0.7.2'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'com.adarshr.test-logger' version '4.0.0'
}

compileJava { options.encoding = "UTF-8" }
compileTestJava { options.encoding = "UTF-8" }

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

description = 'High-performance JSON masker in Java with no runtime dependencies'

group = 'dev.blaauwendraad'

repositories {
    mavenCentral()
}

ext {
    jUnitVersion = '5.10.1'
    jmhVersion = '1.37'
}

java {
    withJavadocJar()
    withSourcesJar()
    registerFeature('nullabilityAnnotations') {
        usingSourceSet(sourceSets.main)
    }
}

dependencies {
    nullabilityAnnotationsImplementation "com.google.code.findbugs:jsr305:3.0.2"

    testImplementation "com.fasterxml.jackson.core:jackson-databind:2.16.0"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${jUnitVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${jUnitVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}"

    jmh "org.openjdk.jmh:jmh-core:${jmhVersion}"
    jmh "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"
    jmhAnnotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:${jmhVersion}"
}

test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            groupId = project.group
            artifactId = project.name
            version = project.version

            pom {
                name = project.name
                description = project.description
                url = 'https://github.com/Breus/json-masker'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/license/mit/'
                    }
                }
                developers {
                    developer {
                        id = 'breus'
                        name = 'Breus Blaauwendraad'
                        email = 'b.blaauwendraad@gmail.com'
                    }
                    developer {
                        id = 'gavlyukovskiy'
                        name = 'Arthur Gavlyukovskiy'
                        email = 'agavlyukovskiy@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/Breus/json-masker.git'
                    url = 'https://github.com/Breus/json-masker'
                }
                issueManagement {
                    url = 'https://github.com/Breus/json-masker/issues'
                }

            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

def sonatypeUser = System.getenv("SONATYPE_USER")
def sonatypePassword = System.getenv("SONATYPE_PASSWORD")
def gpgKey = System.getenv("GPG_PRIV_KEY")
def gpgPassphrase = System.getenv("GPG_PASS_PHRASE")

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username.set(sonatypeUser)
            password.set(sonatypePassword)
        }
    }
}

signing {
    required = gpgKey != null
    useInMemoryPgpKeys(gpgKey, gpgPassphrase)
    sign publishing.publications
}


javadoc {
    options.addBooleanOption('html5', true)
    options.addStringOption('Xdoclint:all,-missing', '-quiet')
}
